@page "/"
@using expenzo.Services
@using expenzo.Models
@inject IUserService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateService authStateService
@inject EncryptionService EncryptionService

<div class="login-container">
    <div class="dashboard-card text-center">
        <h3>Login</h3>
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.UserName" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            </div>
            <div class="mb-3">
                <label for="currency" class="form-label">Currency</label>
                <InputSelect id="currency" class="form-control" @bind-Value="loginModel.Currency">
                    <option value="">Select Currency</option>
                    <option value="NPR">NPR</option>
                    <option value="INR">INR</option>              
                    <option value="USD">USD</option>                      
                    <option value="EUR">EUR</option>
                    <option value="GBP">GBP</option>
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }
    .dashboard-card {
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private User loginModel = new User();
    private string errorMessage;

    private async Task HandleLogin()
    {
        if (string.IsNullOrEmpty(loginModel.UserName) || string.IsNullOrEmpty(loginModel.Password) || string.IsNullOrEmpty(loginModel.Currency))
        {
            errorMessage = "All fields are required.";
            return;
        }

        var user = await UserService.LoginUser(loginModel.UserName, EncryptionService.Encrypt(loginModel.Password));
        if (user != null)
        {
            if (user.Currency == loginModel.Currency)
            {
                authStateService.SetAuthenticatedUser(user);
                Navigation.NavigateTo("/home");
            }
            else
            {
                errorMessage = "Invalid currency type. Only one type of currency is allowed per account.";
            }
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }
}