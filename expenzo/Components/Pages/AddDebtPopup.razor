@page "/add-debt"
@inject IDebtService DebtService

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Debt</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @successMessage
                        </div>
                    }
                    <EditForm Model="newDebt" OnValidSubmit="AddDebt">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="debtAmount" style="margin-bottom: 5px;">Amount</label>
                            <InputNumber @bind-Value="newDebt.DebtAmount" class="form-control" id="debtAmount" />
                            <ValidationMessage For="@(() => newDebt.DebtAmount)" />
                        </div>
                        <div class="form-group">
                            <label for="debtTakenDate" style="margin-bottom: 5px;">Taken Date</label>
                            <InputDate @bind-Value="newDebt.DebtTakenDate" class="form-control" id="debtTakenDate" readonly />
                            <ValidationMessage For="@(() => newDebt.DebtTakenDate)" />
                        </div>
                        <div class="form-group">
                            <label for="debtDueDate" style="margin-bottom: 5px;">Due Date</label>
                            <InputDate @bind-Value="newDebt.DebtDueDate" class="form-control" id="debtDueDate" />
                            <ValidationMessage For="@(() => newDebt.DebtDueDate)" />
                        </div>
                        <div class="form-group">
                            <label for="debtSource" style="margin-bottom: 5px;">Source</label>
                            <InputSelect @bind-Value="newDebt.DebtSource" class="form-control" id="debtSource">
                                <option value="">Select Source</option>
                                <option value="Bank">Bank</option>
                                <option value="Friend">Friend</option>
                                <option value="Family">Family</option>
                                <option value="Other">Other</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => newDebt.DebtSource)" />
                        </div>
                        <div class="form-group">
                            <label for="remark" style="margin-bottom: 5px;">Remark</label>
                            <InputText @bind-Value="newDebt.Remark" class="form-control" id="remark" />
                            <ValidationMessage For="@(() => newDebt.Remark)" />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="ClosePopup">Close</button>
                            <button type="submit" class="btn btn-primary">Add Debt</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private Models.Debt newDebt;
    private int nextDebtId = 1;
    private string successMessage;

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            ResetNewDebt();
            successMessage = string.Empty;
        }
    }

    private void ResetNewDebt()
    {
        newDebt = new Models.Debt
            {
                DebtTakenDate = DateTime.Now.Date,
                DebtDueDate = DateTime.Now.Date.AddDays(1),
                RemainingAmount = 0,
                PaidAmount = 0
            };
    }

    private void AddDebt()
    {
        newDebt.DebtId = nextDebtId++;
        newDebt.RemainingAmount = newDebt.DebtAmount;

        if (newDebt.DebtDueDate <= DateTime.Now.Date)
        {
            return;
        }

        DebtService.AddDebt(newDebt);
        successMessage = "Debt added successfully!";
    }

    private void ClosePopup()
    {
        IsVisible = false;
        OnClose.InvokeAsync(null);
    }
}