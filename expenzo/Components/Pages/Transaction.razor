@page "/transaction"
@using expenzo.Database

<h3>Transaction</h3>
<div class="d-flex align-items-center mb-3">
    <input type="text" class="form-control me-2" style="width: 60%;" placeholder="Search by Title or Remarks" @bind="searchTerm" @bind:event="oninput" />
    <button class="btn btn-secondary me-2" @onclick="SearchTransactions">Search</button>
    <button class="btn btn-secondary me-2" @onclick="ShowFilterPopup">Filter Transactions</button>
    <button class="btn btn-primary" @onclick="ShowAddPopup">Add Transaction</button>
</div>

<AddTransactionPopup IsVisible="isAddPopupVisible" OnClose="HideAddPopup" />
<EditTransactionPopup IsVisible="isEditPopupVisible" OnClose="HideEditPopup" TransactionToEdit="transactionToEdit" />
<DeleteTransactionPopup IsVisible="isDeletePopupVisible" OnClose="HideDeletePopup" TransactionId="transactionToDeleteId" />
<FilterTransactionPopup IsVisible="isFilterPopupVisible" OnClose="HideFilterPopup" OnFilter="ApplyFilter" />

<table class="table table-striped mt-3">
    <thead>
        <tr>
            <th>Id</th>
            <th>Title</th>
            <th>Amount</th>
            <th>Type</th>
            <th>Category</th>
            <th>Date</th>
            <th>Remarks</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in filteredTransactions)
        {
            <tr>
                <td>@transaction.TransactionId</td>
                <td>@transaction.Title</td>
                <td>@transaction.Amount</td>
                <td>@transaction.Type</td>
                <td>@transaction.CategoryName</td>
                <td>@transaction.TransactionDate.ToString("MM/dd/yyyy")</td>
                <td>@transaction.Remarks</td>
                <td>
                    <button class="btn btn-secondary" @onclick="() => ShowEditPopup(transaction)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => ShowDeletePopup(transaction.TransactionId)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool isAddPopupVisible = false;
    private bool isEditPopupVisible = false;
    private bool isDeletePopupVisible = false;
    private bool isFilterPopupVisible = false;
    private List<Models.Transaction> transactions = new List<Models.Transaction>();
    private List<Models.Transaction> filteredTransactions = new List<Models.Transaction>();
    private Models.Transaction transactionToEdit = new Models.Transaction();
    private int transactionToDeleteId;
    private string searchTerm = string.Empty;

    [Inject]
    private TransactionDao TransactionDao { get; set; }

    protected override void OnInitialized()
    {
        transactions = TransactionDao.GetTransactions();
        filteredTransactions = transactions;
    }

    private void ShowAddPopup()
    {
        isAddPopupVisible = true;
    }

    private void HideAddPopup()
    {
        isAddPopupVisible = false;
        transactions = TransactionDao.GetTransactions();
        ApplyFilter();
    }

    private void ShowEditPopup(Models.Transaction transaction)
    {
        transactionToEdit = transaction;
        isEditPopupVisible = true;
    }

    private void HideEditPopup()
    {
        isEditPopupVisible = false;
        transactions = TransactionDao.GetTransactions();
        ApplyFilter();
    }

    private void ShowDeletePopup(int transactionId)
    {
        transactionToDeleteId = transactionId;
        isDeletePopupVisible = true;
    }

    private void HideDeletePopup()
    {
        isDeletePopupVisible = false;
        transactions = TransactionDao.GetTransactions();
        ApplyFilter();
    }

    private void ShowFilterPopup()
    {
        isFilterPopupVisible = true;
    }

    private void HideFilterPopup()
    {
        isFilterPopupVisible = false;
    }

    private void SearchTransactions()
    {
        ApplyFilter();
    }

    private void ApplyFilter(List<Models.Transaction> filteredTransactions = null)
    {
        if (filteredTransactions != null)
        {
            this.filteredTransactions = filteredTransactions;
        }
        else
        {
            this.filteredTransactions = transactions.Where(t =>
                (string.IsNullOrEmpty(searchTerm) || t.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || t.Remarks.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
    }
}