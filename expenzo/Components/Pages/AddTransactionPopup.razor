@page "/add-transaction"
@using expenzo.Services.Interfaces
@inject ITransactionService TransactionService
@inject IDebtService DebtService
@inject ICategoryService CategoryService

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Transaction</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => OnClose.InvokeAsync()"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="@messageClass">@message</div>
                    }
                    <EditForm Model="newTransaction" OnValidSubmit="AddTransaction">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="transactionTitle" class="form-label">Title:</label>
                            <InputText id="transactionTitle" class="form-control" @bind-Value="newTransaction.Title" />
                            <ValidationMessage For="@(() => newTransaction.Title)" />
                        </div>
                        <div class="mb-3">
                            <label for="transactionAmount" class="form-label">Amount:</label>
                            <InputNumber id="transactionAmount" class="form-control" @bind-Value="newTransaction.Amount" />
                            <ValidationMessage For="@(() => newTransaction.Amount)" />
                        </div>
                        <div class="mb-3">
                            <label for="transactionType" class="form-label">Type:</label>
                            <InputSelect id="transactionType" class="form-control" @bind-Value="newTransaction.Type">
                                <option value="" disabled selected>Select the Transaction Type</option>
                                <option value="Income">Income</option>
                                <option value="Expense">Expense</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => newTransaction.Type)" />
                        </div>
                        <div class="mb-3">
                            <label for="transactionCategory" class="form-label">Category:</label>
                            <InputSelect id="transactionCategory" class="form-control" @bind-Value="newTransaction.CategoryName">
                                <option value="" disabled selected>Select the Transaction Category</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Name">@category.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newTransaction.CategoryName)" />
                        </div>
                        <div class="mb-3">
                            <label for="transactionDate" class="form-label">Date:</label>
                            <InputDate id="transactionDate" class="form-control" @bind-Value="newTransaction.TransactionDate" />
                            <ValidationMessage For="@(() => newTransaction.TransactionDate)" />
                        </div>
                        <div class="mb-3">
                            <label for="transactionRemarks" class="form-label">Remarks:</label>
                            <InputTextArea id="transactionRemarks" class="form-control" @bind-Value="newTransaction.Remarks" />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="() => OnClose.InvokeAsync()">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private Models.Transaction newTransaction = new Models.Transaction { TransactionDate = DateTime.Now };
    private List<Models.Category> categories = new List<Models.Category>();
    private string message = string.Empty;
    private string messageClass = string.Empty;

    protected override void OnInitialized()
    {
        categories = CategoryService.GetCategories();
    }

    private void AddTransaction()
    {
        if (newTransaction.Type == "Expense")
        {
            var totalIncome = TransactionService.GetTotalIncomeAmount();
            var totalRemainingDebts = DebtService.GetTotalDebtRemainingAmount();
            var totalExpense = TransactionService.GetTotalExpenseAmount();

            if ((totalIncome + totalRemainingDebts - totalExpense) < newTransaction.Amount)
            {
                message = "Insufficient balance to add this expense.";
                messageClass = "alert alert-danger";
                return;
            }
        }

        TransactionService.AddTransaction(newTransaction);
        message = "Transaction added successfully.";
        messageClass = "alert alert-success";

        // Reset the form
        newTransaction = new Models.Transaction { TransactionDate = DateTime.Now };
    }
}