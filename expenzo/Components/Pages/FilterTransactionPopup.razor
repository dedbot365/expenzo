@page "/filter-transaction-popup"


@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Filter Transactions</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => OnClose.InvokeAsync()"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="this" OnValidSubmit="ApplyFilter">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="amountMin" class="form-label">Minimum Amount:</label>
                            <InputNumber id="amountMin" class="form-control" @bind-Value="amountMin" />
                        </div>
                        <div class="mb-3">
                            <label for="amountMax" class="form-label">Maximum Amount:</label>
                            <InputNumber id="amountMax" class="form-control" @bind-Value="amountMax" />
                        </div>
                        <div class="mb-3">
                            <label for="selectedType" class="form-label">Type:</label>
                            <InputSelect id="selectedType" class="form-control" @bind-Value="selectedType">
                                <option value="">All</option>
                                @foreach (var type in types)
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label for="selectedCategory" class="form-label">Category:</label>
                            <InputSelect id="selectedCategory" class="form-control" @bind-Value="selectedCategory">
                                <option value="">All</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label for="dateStart" class="form-label">Start Date:</label>
                            <InputDate id="dateStart" class="form-control" @bind-Value="dateStart" />
                        </div>
                        <div class="mb-3">
                            <label for="dateEnd" class="form-label">End Date:</label>
                            <InputDate id="dateEnd" class="form-control" @bind-Value="dateEnd" />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="ClearFilters">Clear</button>
                            <button type="submit" class="btn btn-primary">Apply Filter</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<List<Models.Transaction>> OnFilter { get; set; }

    private decimal? amountMin;
    private decimal? amountMax;
    private string selectedType = string.Empty;
    private string selectedCategory = string.Empty;
    private DateTime? dateStart;
    private DateTime? dateEnd;
    private List<string> types = new List<string> { "Income", "Expense" };
    private List<string> categories = new List<string>();

    protected override void OnInitialized()
    {
        categories = CategoryService.GetCategories().Select(c => c.Name).ToList();
    }
    // Apply the filter
    private void ApplyFilter()
    {
        var filteredTransactions = TransactionService.GetTransactions().Where(transaction =>
            (!amountMin.HasValue || transaction.Amount >= amountMin.Value) &&
            (!amountMax.HasValue || transaction.Amount <= amountMax.Value) &&
            (string.IsNullOrEmpty(selectedType) || transaction.Type.Equals(selectedType, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedCategory) || transaction.CategoryName.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase)) &&
            (!dateStart.HasValue || transaction.TransactionDate >= dateStart.Value) &&
            (!dateEnd.HasValue || transaction.TransactionDate <= dateEnd.Value)
        ).ToList();

        OnFilter.InvokeAsync(filteredTransactions);
        OnClose.InvokeAsync();
    }

    private void ClearFilters()
    {
        amountMin = null;
        amountMax = null;
        selectedType = string.Empty;
        selectedCategory = string.Empty;
        dateStart = null;
        dateEnd = null;
        ApplyFilter();
    }
}