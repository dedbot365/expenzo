@page "/category"

@inject ICategoryService CategoryService

<h3>Category</h3>

<div class="d-flex align-items-center mb-3">
    <input type="text" class="form-control me-2" style="width: 60%;" placeholder="Search by category name" @bind="searchTerm" @bind:event="oninput" />
    <button class="btn btn-secondary me-2" @onclick="FilterCategories">Search</button>
    <button class="btn btn-primary" @onclick="ShowAddPopup">Add Category</button>
</div>

<AddCategoryPopup IsVisible="isAddPopupVisible" OnClose="HideAddPopup" Category="selectedCategory" />
<EditCategoryPopup IsVisible="isEditPopupVisible" OnClose="HideEditPopup" Category="selectedCategory" />
<DeleteCategoryPopup IsVisible="isDeletePopupVisible" OnClose="HideDeletePopup" Category="selectedCategory" />

<table class="table table-striped mt-3">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var category in filteredCategories)
        {
            <tr>
                <td>@category.Id</td>
                <td>@category.Name</td>
                <td>
                    <button class="btn btn-secondary" @onclick="() => ShowEditPopup(category)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => ShowDeletePopup(category)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code
{
    private bool isAddPopupVisible = false;
    private bool isEditPopupVisible = false;
    private bool isDeletePopupVisible = false;
    private List<Models.Category> categories = new List<Models.Category>();
    private List<Models.Category> filteredCategories = new List<Models.Category>();
    private Models.Category selectedCategory = new Models.Category();
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        categories = await Task.Run(() => CategoryService.GetCategories());
        filteredCategories = categories;
    }

    private void ShowAddPopup()
    {
        selectedCategory = new Models.Category();
        isAddPopupVisible = true;
    }

    private void ShowEditPopup(Models.Category category)
    {
        selectedCategory = category;
        isEditPopupVisible = true;
    }

    private void ShowDeletePopup(Models.Category category)
    {
        selectedCategory = category;
        isDeletePopupVisible = true;
    }

    private void HideAddPopup()
    {
        isAddPopupVisible = false;
        categories = CategoryService.GetCategories();
        FilterCategories();
    }

    private void HideEditPopup()
    {
        isEditPopupVisible = false;
        categories = CategoryService.GetCategories();
        FilterCategories();
    }

    private void HideDeletePopup()
    {
        isDeletePopupVisible = false;
        categories = CategoryService.GetCategories();
        FilterCategories();
    }

    private void FilterCategories()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCategories = categories;
        }
        else
        {
            filteredCategories = categories
                .Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
}