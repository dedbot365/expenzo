@page "/category-popup"

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public Models.Category Category { get; set; } = new Models.Category();

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public bool IsDeleteMode { get; set; }

    private string errorMessage = string.Empty;

    private void SaveCategory()
    {
        if (string.IsNullOrWhiteSpace(Category.Name))
        {
            errorMessage = "Category name cannot be empty.";
            return;
        }

        if (IsEditMode)
        {
            CategoryDao.UpdateCategory(Category);
        }
        else
        {
            CategoryDao.AddCategory(Category);
        }

        OnClose.InvokeAsync();
        errorMessage = string.Empty;
    }

    private void ConfirmDelete()
    {
        CategoryDao.DeleteCategory(Category.Id);
        OnClose.InvokeAsync();
    }
}

@if (IsVisible)
{
    <div class="modal d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((IsDeleteMode ? "Delete" : (IsEditMode ? "Edit" : "Add New")) + " Category")</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => OnClose.InvokeAsync()"></button>
                </div>
                <div class="modal-body">
                    @if (IsDeleteMode)
                    {
                        <p>Are you sure you want to delete this category?</p>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label for="categoryName" class="form-label">Category Name:</label>
                            <input type="text" class="form-control" id="categoryName" @bind="Category.Name">
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="text-danger">@errorMessage</div>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => OnClose.InvokeAsync()">Close</button>
                    @if (IsDeleteMode)
                    {
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary" @onclick="SaveCategory">Save changes</button>
                    }
                </div>
            </div>
        </div>
    </div>
}