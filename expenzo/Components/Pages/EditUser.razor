@page "/edit-user"


<h3>Edit User</h3>

@if (currentUser != null)
{
    <EditForm Model="@editModel" OnValidSubmit="HandleEditUser">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <InputText id="username" class="form-control" @bind-Value="editModel.UserName" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">New Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="editModel.Password" />
        </div>
        <div class="mb-3">
            <label for="confirmPassword" class="form-label">Confirm Password</label>
            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" />
        </div>
        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    private User currentUser;
    private User editModel = new User();
    private string confirmPassword;
    private string errorMessage;
    private string successMessage;

    protected override async Task OnInitializedAsync()
    {
        currentUser = authStateService.GetAuthenticatedUser();
        if (currentUser != null)
        {
            editModel.UserName = currentUser.UserName;
            editModel.Currency = "NPR"; // Set the default currency to NPR
        }
    }

    private async Task HandleEditUser()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;

        if (string.IsNullOrEmpty(editModel.UserName) || string.IsNullOrEmpty(editModel.Password) || string.IsNullOrEmpty(confirmPassword))
        {
            errorMessage = "All fields are required.";
            return;
        }

        if (editModel.Password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        if (!IsValidPassword(editModel.Password))
        {
            errorMessage = "Password does not meet the strength requirements.";
            return;
        }

        var encryptionService = new EncryptionService();
        currentUser.UserName = editModel.UserName;
        currentUser.Password = encryptionService.Encrypt(editModel.Password);
        currentUser.Currency = "NPR"; // Ensure the currency is set to NPR

        // Update the user in the database
        var result = await UserService.UpdateUser(currentUser);
        if (result)
        {
            successMessage = "User updated successfully.";
        }
        else
        {
            errorMessage = "Failed to update user.";
        }
    }

    private bool IsValidPassword(string password)
    {
        // Password must be at least 8 characters long and contain at least one special character
        return password.Length >= 8 && password.Any(ch => !char.IsLetterOrDigit(ch));
    }
}